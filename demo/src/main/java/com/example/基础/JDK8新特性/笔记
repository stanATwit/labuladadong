https://mp.weixin.qq.com/s/J9pm6_aYsUW2hwI6bQhHGg

一、lambda表达式
lambda 表达式是一个匿名函数（没有名字的函数）。 lambda 表达式允许把一个函数作为参数进行传递。

lambda 表达式语法如下： （参数1，参数2） ->  {
                         方法体
                         }

左边指定了 lambda 表达式所需要的所有参数，右边用来描述方法体。-> 即为 lambda 运算符。

注意事项：

参数列表的数据类型会自动推断。也就是说，如果匿名函数有参数列表的话，只需要写参数名即可，不需要写参数的类型。
如果参数列表为空，则左边只需要写小括号即可。
如果参数只有一个，则可以省略小括号，只写参数的名称即可。
如果方法体中只有一条执行语句，则可以省略右边的大括号。若有返回值，则可以把 return 和大括号同时省略。

二、接口默认方法和静态方法
我们知道，在 Java 的接口中，只能定义方法名，不能实现方法体的，具体的实现需要子类去做。
但是，到了 JDK8 就不一样了。在接口中，也可以通过 default关键字来实现方法体。

另外，在接口中也可以定义静态方法。这样，就可以直接通过接口名调用静态方法。（这也很正常，接口本来就不能实例化）

需要注意的是，不能通过实现类的对象去调用接口的静态方法。

三、函数式接口
如果一个接口中只有一个抽象方法，则称其为函数式接口。可以使用 @FunctionalInterface 注解来检测一个接口是否为函数式接口。
Consumer，消费型接口。接收一个参数，没有返回值。其方法有：void accept(T t);
Supplier，供给型接口。没有参数，带返回值。其方法：T get();
Function<T, R>，函数型接口。接收一个参数，返回一个结果。其方法：R apply(T t);
Predicate，断言型接口。接收一个参数，返回boolean值。其方法：boolean test(T t);


四、方法引用

